// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/user_repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	models "weather_bot/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepoInterface is a mock of UserRepoInterface interface.
type MockUserRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoInterfaceMockRecorder
}

// MockUserRepoInterfaceMockRecorder is the mock recorder for MockUserRepoInterface.
type MockUserRepoInterfaceMockRecorder struct {
	mock *MockUserRepoInterface
}

// NewMockUserRepoInterface creates a new mock instance.
func NewMockUserRepoInterface(ctrl *gomock.Controller) *MockUserRepoInterface {
	mock := &MockUserRepoInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepoInterface) EXPECT() *MockUserRepoInterfaceMockRecorder {
	return m.recorder
}

// GetAllUsers mocks base method.
func (m *MockUserRepoInterface) GetAllUsers(ctx context.Context) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserRepoInterfaceMockRecorder) GetAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserRepoInterface)(nil).GetAllUsers), ctx)
}

// SaveUserIfNotExist mocks base method.
func (m *MockUserRepoInterface) SaveUserIfNotExist(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserIfNotExist", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserIfNotExist indicates an expected call of SaveUserIfNotExist.
func (mr *MockUserRepoInterfaceMockRecorder) SaveUserIfNotExist(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserIfNotExist", reflect.TypeOf((*MockUserRepoInterface)(nil).SaveUserIfNotExist), ctx, user)
}

// UpdateModification mocks base method.
func (m *MockUserRepoInterface) UpdateModification(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModification", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModification indicates an expected call of UpdateModification.
func (mr *MockUserRepoInterfaceMockRecorder) UpdateModification(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModification", reflect.TypeOf((*MockUserRepoInterface)(nil).UpdateModification), ctx, user)
}
